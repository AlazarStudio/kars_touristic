import React, { useEffect, useState } from 'react';
import classes from './AddTransfer.module.css';
import server from '../../../../../serverConfig';
import Form from '../../Form/Form';

function AddTransfer({ transferRequests = [], fetchTransferRequests }) {
  const [description, setDescription] = useState('');
  const [images, setImages] = useState([]);
  const [showDescription, setShowDescription] = useState(false);

  useEffect(() => {
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞
    async function fetchDescription() {
      try {
        const response = await fetch(`${server}/api/getTransferInfo`);
        const data = await response.json();
        setDescription(data.description); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        setImages(data.images || []);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏:', error);
      }
    }

    fetchDescription();
  }, []);

  // –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
  const handleFormSuccess = async () => {
    try {
      // –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –æ–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
      const response = await fetch(`${server}/api/getTransferInfo`);
      const data = await response.json();
      setDescription(data.description); // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏:', error);
    }
  };

  
  const toggleDescriptionVisibility = () => {
    setShowDescription((prev) => !prev); // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å
  };

  const handleDelete = async (id) => {
    const confirmDelete = window.confirm(
      '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞—è–≤–∫—É?'
    );
    if (!confirmDelete) return;

    try {
      const res = await fetch(`${server}/api/transfer/${id}`, {
        method: 'DELETE',
      });

      if (res.ok) {
        fetchTransferRequests(); // –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
      } else {
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏');
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:', err);
    }
  };

  const handleProcess = async (id, currentStatus) => {
    try {
      const newStatus = !currentStatus; // –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º

      const res = await fetch(`${server}/api/transfer/${id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ status: newStatus }), // –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å
      });

      if (res.ok) {
        fetchTransferRequests(); // –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      } else {
        const text = await res.text();
        alert(`–û—à–∏–±–∫–∞: ${text}`);
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:', err);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞');
    }
  };

  return (
    <>
      <div className={classes.addData}>
        <div className={classes.addData1}>
          {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è/—Å–∫—Ä—ã—Ç–∏—è –æ–ø–∏—Å–∞–Ω–∏—è */}
          <button onClick={toggleDescriptionVisibility}>
            {showDescription
              ? '–°–∫—Ä—ã—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ'
              : '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¢—Ä–∞–Ω—Å—Ñ–µ—Ä'}
          </button>

          {showDescription && (
            <>
              {description && (
                <div className={classes.companyInfo}>
                  <h3>–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞:</h3>
                  <p>{description}</p>
                </div>
              )}

              {images.length > 0 && (
                <div className={classes.imagePreview}>
                  <h4>–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:</h4>
                  <div className={classes.imageList}>
                    {images.map((img, index) => (
                      <img
                        key={index}
                        src={`${server}/refs/${img}`} // üëà –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º `/refs/`
                        alt={`faq-img-${index}`}
                        style={{
                          width: '150px',
                          marginRight: '10px',
                          borderRadius: '8px',
                        }}
                      />
                    ))}
                  </div>
                </div>
              )}

              <Form
                actionUrl={`${server}/api/transferInfo`}
                method="put"
               type="multipart"
                onSuccess={handleFormSuccess}
              >
                <label>–î–æ–±–∞–≤–∏—Ç—å –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏</label>
                <textarea
                  name="description"
                  placeholder="–û–ø–∏—Å–∞–Ω–∏–µ"
                  required
                  defaultValue={description} // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –ø–æ–ª–µ
                />
                <label>–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</label>
                <input type="file" name="images" multiple accept="image/*" />
                <button type="submit">–î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏</button>
              </Form>
            </>
          )}
        </div>

        {transferRequests.length > 0 ? (
          <div className={classes.requestsTableWrapper}>
            <div className={classes.addData_title}>–ó–∞—è–≤–∫–∏ –Ω–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä</div>
            <table className={classes.requestsTable}>
              <thead>
                <tr>
                  <th>‚Ññ</th>
                  <th>–§–ò–û</th>
                  <th>–¢–æ—á–∫–∞ –ê</th>
                  <th>–¢–æ—á–∫–∞ –í</th>
                  <th>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è</th>
                  <th>–ü–∞—Å—Å–∞–∂–∏—Ä—ã</th>
                  <th>–¢–µ–ª–µ—Ñ–æ–Ω</th>
                  <th>–†–µ–≥–∏–æ–Ω</th>
                  <th>–ö–ª–∞—Å—Å –∞–≤—Ç–æ</th>
                  <th>–°–µ–≥–º–µ–Ω—Ç</th>
                  <th>–ë–∞–≥–∞–∂</th>
                  <th>–°—Ç–∞—Ç—É—Å</th>
                  <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
              </thead>

              <tbody>
                {transferRequests.map((req, index) => (
                  <tr
                    key={req._id}
                    className={req.status === true ? classes.processedRow : ''}
                  >
                    <td>{index + 1}</td>
                    <td>{req.personName}</td>
                    <td>{req.from}</td>
                    <td>{req.to}</td>
                    <td>
                      {new Date(req.dateTime).toLocaleString('ru-RU', {
                        day: '2-digit',
                        month: '2-digit',
                        year: 'numeric',
                        hour: '2-digit',
                        minute: '2-digit',
                      })}
                    </td>
                    <td>{req.passengers}</td>
                    <td>{req.personPhone}</td>
                    <td>{req.region}</td>
                    <td>{req.transportClass}</td>
                    <td>{req.transportType}</td>
                    <td>{req.additionalServices}</td>
                    <td>{req.status ? '–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ' : '–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ'}</td>
                    <td>
                      <button
                        onClick={() => handleProcess(req._id, req.status)}
                        className={classes.processButton}
                      >
                        {req.status ? '–û—Ç–º–µ–Ω–∏—Ç—å' : '–û–±—Ä–∞–±–æ—Ç–∞—Ç—å'}
                      </button>

                      <button
                        onClick={() => handleDelete(req._id)}
                        className={classes.deleteButton}
                        style={{ marginLeft: 8 }}
                      >
                        –£–¥–∞–ª–∏—Ç—å
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        ) : (
          <p className={classes.noRequests}>–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.</p>
        )}
      </div>
    </>
  );
}

export default AddTransfer;
